# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w07d9vgkobvCG2x7sAPGlMKAHoLnbwSR
"""

from keras.datasets import cifar100
import matplotlib.pyplot as plt

(X_train, y_train), (X_test, y_test)= cifar100.load_data()

import numpy as np
import keras
import tensorflow as tf
from sklearn.preprocessing import OneHotEncoder
one_hot_encoder = OneHotEncoder(sparse=False)

from keras.utils import np_utils
X_train = X_train[:20000]
y_train = y_train[:20000]
X_train, X_test = X_train/255, X_test/255
X_train = X_train.reshape(20000, 3*32*32)
X_test = X_test.reshape(10000, 3*32*32)
num_classes = len(np.unique(y_train))
one_hot_encoder.fit(y_train)

y_train = one_hot_encoder.transform(y_train)
y_test = one_hot_encoder.transform(y_test)

(X_train, X_valid) = X_train[:10000], X_train[10000:20000]
(y_train, y_valid) = y_train[:10000], y_train[10000:20000]

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten

model = Sequential()
a = "relu"
model.add(Dense(256, activation=a, input_shape=(32 * 32 * 3,)))
model.add(Dropout(0.2))
model.add(Dense(256, activation=a))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))
model.summary()

import keras.backend as K
from keras.optimizers import RMSprop

import time
start_time = time.time()
batch_size =512
num_classes = 100
epochs = 20
model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(),
              metrics=['accuracy'])
history = model.fit(X_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(X_valid, y_valid))
score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
print(time.time()-start_time)

